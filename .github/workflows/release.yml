name: release
on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - build: linux
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}

      # Inspired on: https://github.com/passcod/cargo-watch/blob/main/.github/workflows/release.yml#L123
      - name: Extract version
        shell: bash
        run: |
          set -euxo pipefail

          version=$(grep -m1 -F 'version =' Cargo.toml | cut -d\" -f2)

          if [[ -z "$version" ]]; then
            echo "Error: no version :("
            exit 1
          fi

          echo "$version" > VERSION

      - name: Package
        shell: bash
        run: |
          set -euxo pipefail
          bin="target/${{ matrix.target }}/release/pretty-make"
          dst="cargo-watch--${{ matrix.target }}"
          mkdir "$dst"
          strip "$bin" || true
          mv "$bin" "$dst/"
          mv README.md LICENSE completions cargo-watch.1 "$dst/"

      - name: Archive (tar)
        if: startsWith(matrix.name, 'linux-')
        shell: bash
        run: |
          set -euxo pipefail
          version=$(cat VERSION)
          dst="cargo-watch-v${version}-${{ matrix.target }}"
          tar cavf "$dst.tar.xz" "$dst"

      - name: Archive (deb)
        if: startsWith(matrix.name, 'linux-')
        shell: bash
        run: |
          set -euxo pipefail
          version=$(cat VERSION)
          dst="cargo-watch-v${version}-${{ matrix.target }}"
          mkdir -p "deb/$dst"
          cd "deb/$dst"
          mkdir -p DEBIAN usr/{bin,share/{man/man1,zsh/site-functions}}
          cp "../../$dst/cargo-watch" usr/bin/
          cp "../../$dst/cargo-watch.1" usr/share/man/man1/
          cp "../../$dst/completions/zsh" usr/share/zsh/site-functions/_cargo-watch
          cat <<-CONTROL > DEBIAN/control
          Package: cargo-watch
          Version: ${version/v/}
          Architecture: $(echo "${{ matrix.name }}" | cut -d- -f2)
          Maintainer: FÃ©lix Saparelli <aur@passcod.name>
          Installed-Size: $(du -d1 usr | tail -n1 | cut -d\t -f1)
          Homepage: https://github.com/passcod/cargo-watch
          Description: Watches over your Cargo project's source.
           Cargo Watch watches over your project's source for changes, and runs Cargo commands when they occur.
          CONTROL
          cd ..
          fakeroot dpkg -b "$dst"
          mv "$dst.deb" ../
          cd ..
      - name: Archive (zip)
        if: startsWith(matrix.name, 'windows-')
        shell: bash
        run: |
          set -euxo pipefail
          version=$(cat VERSION)
          dst="cargo-watch-v${version}-${{ matrix.target }}"
          7z a "$dst.zip" "$dst"

      - uses: actions/upload-artifact@v2
        with:
          name: pretty-make-${{ matrix.build }}
          path: target/${{ matrix.target }}/release/pretty-make

      - uses: actions/upload-artifact@v2
        with:
          name: builds
          retention-days: 1
          path: |
            cargo-watch-v*.tar.xz
            cargo-watch-v*.deb
            cargo-watch-v*.zip

  create-release:
    name: create-release
    needs: ['build-release']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
      - run: |
          ls -l
          mv -v pretty-make-linux/pretty-make pretty-make-linux/pretty-make-linux
          mv -v pretty-make-macos/pretty-make pretty-make-macos/pretty-make-macos
      - id: get_tag
        run: |
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
      - uses: softprops/action-gh-release@v1
        with:
          name: Pretty Make ${{ steps.get_tag.outputs.SOURCE_TAG }}
          files: |
            pretty-make-linux/*
            pretty-make-macos/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: publish-crate
    needs: ['build-release']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
      - uses: katyo/publish-crates@v1
        with:
            registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
